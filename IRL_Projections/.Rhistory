labels = age_bracket_to_bucket$bucket,
right = FALSE))
# Include those participant IDs as well that haven't reported contacts at other category
length(setdiff(df$part_id,output_other$part_id))
# Create a dataset with these missing participant_ids
output_other_missing <- as.data.frame(setdiff(df$part_id,output_other$part_id))
colnames(output_other_missing) <- "part_id"
# Add columns for participant_age and participant_age_bracket
output_other_missing <- left_join(output_other_missing,df[c("part_id","part_age")], by = "part_id")
output_other_missing <- output_other_missing %>% distinct()
output_other_missing[paste0("X", 1:16)] <- 0
# Add column for participant_age_bracket
output_other_missing <- output_other_missing %>%
mutate(participant_age_bracket = cut(part_age,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, Inf),
#breaks = c(0, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 100),
labels = age_bracket_to_bucket$bucket,
right = FALSE))
output_other <- rbind(output_other,output_other_missing)
output_other <- output_other %>% arrange(part_id)
output_other<- output_other[!is.na(output_other$part_id),]
rm(contact_common)
rm(df_participant_temp)
rm(hh_common)
rm(participant_common)
rm(participant_extra)
rm(age_bracket_to_bucket)
rm(data)
rm(df_leisure)
rm(df_transport)
rm(household_lookup)
rm(output)
df_home = df[df$cnt_home == 1,]
# Define age brackets
age_brackets <- cut(df_home$contact_age,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 100),
#breaks = c(0, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 100),
labels = c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16"),
right = FALSE)
# Add the age_brackets to the data
data <- df_home %>%
mutate(age_bracket = age_brackets)
age_bracket_to_bucket <- data.frame(
age_bracket = c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16"),
bucket_number = 1:16
)
data <- data %>%
left_join(age_bracket_to_bucket, by = "age_bracket")
# Create a pivot table with counts of contacts per age bracket for each participant
output <- data %>%
group_by(part_id,part_age,age_bracket) %>%
summarise(contact_count = n()) %>%
spread(age_bracket, contact_count, fill = 0)
output_home <- output %>%
select("part_id","part_age",
"X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16")
# Dataset containing the household information of the people living in the households
hh_extra <- read.csv("2008_Mossong_POLYMOD_hh_extra.csv")
# Function to get non-missing values from a row (for household members)
get_non_missing_ages <- function(row) {
# Exclude household_id and remove NAs
non_missing_ages <- as.numeric(row[!is.na(row)])
return(non_missing_ages)
}
# Apply the function row-wise using lapply
result_list <- lapply(1:nrow(hh_extra), function(i) {
list(
household_id = hh_extra$hh_id[i],
non_missing_ages = get_non_missing_ages(hh_extra[i, 2:ncol(hh_extra)])  # Exclude household_id, use only age columns
)
})
# View the result
print(result_list)
# Define the age ranges as breaks and labels
age_ranges <- c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, Inf)
age_labels <- c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8","X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16")
# Initialize an empty data frame to store results
result_df <- data.frame(household_id = hh_extra$hh_id)
# Add columns for each age range with 0s to start
for (label in age_labels) {
result_df[[label]] <- 0
}
# Loop through each household and count members in each age range
for (i in 1:length(result_df$household_id)) {
print(i)
ages <- result_list[[i]]$non_missing_ages  # Get ages for the household
age_counts <- table(cut(ages, breaks = age_ranges, labels = age_labels, right = FALSE))  # Count ages in ranges
# Update the result_df with counts for each range
for (label in age_labels) {
result_df[i, label] <- age_counts[[label]]
}
}
# View the final result
print(result_df)
colnames(result_df) <- c("hh_id","participant_v_alpha_1", "participant_v_alpha_2", "participant_v_alpha_3",
"participant_v_alpha_4","participant_v_alpha_5","participant_v_alpha_6","participant_v_alpha_7",
"participant_v_alpha_8","participant_v_alpha_9","participant_v_alpha_10","participant_v_alpha_11",
"participant_v_alpha_12","participant_v_alpha_13","participant_v_alpha_14","participant_v_alpha_15",
"participant_v_alpha_16" )
result_df <- left_join(result_df,distinct(df_org[,c("part_id","hh_id")]),by="hh_id")
output_home <- left_join(output_home,result_df,by="part_id")
# Define age brackets and bucket numbers for participant age
age_bracket_to_bucket <- data.frame(
age_bracket = c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16"),
bucket_number = 1:16
)
output_home <- output_home %>%
mutate(participant_age_bracket = cut(part_age,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, Inf),
#breaks = c(0, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 100),
labels = age_bracket_to_bucket$bucket,
right = FALSE))
# Add the missing participants information
# Include those participant IDs as well that haven't reported contacts at home category
length(setdiff(df$part_id,output_home$part_id))
# Create a dataset with these missing participant_ids
output_home_missing <- as.data.frame(setdiff(df$part_id,output_home$part_id))
colnames(output_home_missing) <- "part_id"
# Add columns for participant_age and participant_age_bracket
output_home_missing <- left_join(output_home_missing,df[c("part_id","part_age")], by = "part_id")
output_home_missing <- output_home_missing %>% distinct()
output_home_missing[paste0("X", 1:16)] <- 0
# Add information on household age structures
output_home_missing <- left_join(output_home_missing,result_df,by = "part_id")
# Add column for participant_age_bracket
output_home_missing <- output_home_missing %>%
mutate(participant_age_bracket = cut(part_age,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, Inf),
#breaks = c(0, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 100),
labels = age_bracket_to_bucket$bucket,
right = FALSE))
output_home <- rbind(output_home,output_home_missing)
output_home <- output_home %>% arrange(part_id)
output_home <- output_home[!is.na(output_home$part_id),]
rm(age_bracket_to_bucket)
rm(data)
rm(hh_extra)
rm(output)
rm(result_df)
rm(result_list)
rm(age_brackets)
rm(age_counts)
rm(age_labels)
rm(age_ranges)
rm(ages)
rm(avg_est_age)
rm(i)
rm(label)
rm(get_non_missing_ages)
df_school <- df[df$cnt_school == 1,]
# Load dataset containing information on when the diary was filled out
df_sday <- read.csv("2008_Mossong_POLYMOD_sday.csv")
colnames(df_sday) <- c("part_id" ,  "sday_id" ,  "day" ,      "month"  ,   "year" ,     "dayofweek")
df_school <- left_join(df_school,df_sday, by = "part_id")
# If the day of the week is 0 or 6 , then w_i vector is 0 otherwise it is 1
#df_school$s_i <- ifelse(df_school$dayofweek == 0 | df_school$dayofweek == 6, 0, 1)
df_school$s_i <- 1
# Define age brackets
age_brackets <- cut(df_school$contact_age,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 100),
labels = c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16"),
right = FALSE)
# Add the age_brackets to the data
data <- df_school %>%
mutate(age_bracket = age_brackets)
age_bracket_to_bucket <- data.frame(
age_bracket = c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16"),
bucket_number = 1:16
)
data <- data %>%
left_join(age_bracket_to_bucket, by = "age_bracket")
# Create a pivot table with counts of contacts per age bracket for each participant
output <- data %>%
group_by(part_id, part_age, age_bracket) %>%
summarise(contact_count = n()) %>%
spread(age_bracket, contact_count, fill = 0)
output_school <- output %>%
select("part_id","part_age",
"X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16")
df_match <- unique(df_school[c("part_id","s_i")])
output_school <- left_join(output_school,df_match,by = "part_id")
output_school <- output_school[!is.na(output_school$s_i),]
# Define age brackets and bucket numbers for participant age
age_bracket_to_bucket <- data.frame(
age_bracket = c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16"),
bucket_number = 1:16
)
output_school <- output_school %>%
mutate(participant_age_bracket = cut(part_age,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, Inf),
#breaks = c(0, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 100),
labels = age_bracket_to_bucket$bucket,
right = FALSE))
# Add the missing participant_ids
# Add the missing participants information
# Include those participant IDs as well that haven't reported contacts at school category
length(setdiff(df$part_id,output_school$part_id))
# Create a dataset with these missing participant_ids
output_school_missing <- as.data.frame(setdiff(df$part_id,output_school$part_id))
colnames(output_school_missing) <- "part_id"
# Add columns for participant_age and participant_age_bracket
output_school_missing <- left_join(output_school_missing,df[c("part_id","part_age")], by = "part_id")
output_school_missing <- output_school_missing %>% distinct()
output_school_missing[paste0("X", 1:16)] <- 0
output_school_missing$s_i <- 0
# Add column for participant_age_bracket
output_school_missing <- output_school_missing %>%
mutate(participant_age_bracket = cut(part_age,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, Inf),
#breaks = c(0, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 100),
labels = age_bracket_to_bucket$bucket,
right = FALSE))
output_school <- rbind(output_school,output_school_missing)
output_school <- output_school %>% arrange(part_id)
output_school <- output_school[!is.na(output_school$part_id),]
rm(age_bracket_to_bucket)
rm(data)
rm(output)
rm(age_brackets)
rm(output_home_missing)
rm(output_other_missing)
rm(output_school_missing)
df_work <- df[df$cnt_work == 1,]
# Load dataset that contains information on the day of the week the diary was filled out
df_sday <- read.csv("2008_Mossong_POLYMOD_sday.csv")
colnames(df_sday) <- c("part_id" ,  "sday_id" ,  "day" ,      "month"  ,   "year" ,     "dayofweek")
df_work <- left_join(df_work,df_sday, by = "part_id")
df_work$w_i <- 1
# Define age brackets
age_brackets <- cut(df_work$contact_age,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 100),
labels = c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16"),
right = FALSE)
# Add the age_brackets to the data
data <- df_work %>%
mutate(age_bracket = age_brackets)
age_bracket_to_bucket <- data.frame(
age_bracket = c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16"),
bucket_number = 1:16
)
data <- data %>%
left_join(age_bracket_to_bucket, by = "age_bracket")
# Create a pivot table with counts of contacts per age bracket for each participant
output <- data %>%
group_by(part_id, part_age, age_bracket) %>%
summarise(contact_count = n()) %>%
spread(age_bracket, contact_count, fill = 0)
output_work <- output %>%
select("part_id","part_age" ,
"X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16")
df_match <- unique(df_work[c("part_id","w_i")])
output_work <- left_join(output_work,df_match,by = "part_id")
output_work <- output_work[!is.na(output_work$w_i),]
# Define age brackets and bucket numbers for participant age
age_bracket_to_bucket <- data.frame(
age_bracket = c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8",
"X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16"),
bucket_number = 1:16
)
output_work <- output_work %>%
mutate(participant_age_bracket = cut(part_age,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, Inf),
#breaks = c(0, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 100),
labels = age_bracket_to_bucket$bucket,
right = FALSE))
# Add the missing participants information
# Include those participant IDs as well that haven't reported contacts at school category
length(setdiff(df$part_id,output_work$part_id))
# Create a dataset with these missing participant_ids
output_work_missing <- as.data.frame(setdiff(df$part_id,output_work$part_id))
colnames(output_work_missing) <- "part_id"
# Add columns for participant_age and participant_age_bracket
output_work_missing <- left_join(output_work_missing,df[c("part_id","part_age")], by = "part_id")
output_work_missing <- output_work_missing %>% distinct()
output_work_missing[paste0("X", 1:16)] <- 0
output_work_missing$w_i <- 0
# Add column for participant_age_bracket
output_work_missing <- output_work_missing %>%
mutate(participant_age_bracket = cut(part_age,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, Inf),
#breaks = c(0, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 100),
labels = age_bracket_to_bucket$bucket,
right = FALSE))
output_work <- rbind(output_work,output_work_missing)
output_work <- output_work %>% arrange(part_id)
output_work <- output_work[!is.na(output_work$part_id),]
rm(age_bracket_to_bucket)
rm(data)
rm(df_match)
rm(output)
rm(output_work_missing)
output_home <- output_home[!is.na(output_home$participant_age_bracket),]
output_other <- output_other[!is.na(output_other$participant_age_bracket),]
output_school <- output_school[!is.na(output_school$participant_age_bracket),]
output_work <- output_work[!is.na(output_work$participant_age_bracket),]
matrix_size <- 16
# Supporting functions
get_adjacent_cells <- function(matrix_size, row, col) {
adjacent_cells <- list()
if (row > 0) {
adjacent_cells <- append(adjacent_cells, list(c(row - 1, col)))
}
if (row < matrix_size - 1) {
adjacent_cells <- append(adjacent_cells, list(c(row + 1, col)))
}
if (col > 0) {
adjacent_cells <- append(adjacent_cells, list(c(row, col - 1)))
}
if (col < matrix_size - 1) {
adjacent_cells <- append(adjacent_cells, list(c(row, col + 1)))
}
adjacent_cells <- append(adjacent_cells, list(c(row, col)))
return(adjacent_cells)
}
convert_to_cell_numbers <- function(matrix_size, adjacent_cells) {
cell_numbers <- sapply(adjacent_cells, function(cell) {
row <- cell[1]
col <- cell[2]
return((row * matrix_size + col) + 1)
})
return(cell_numbers)
}
neighbour_cells_list <- list()
total_neighbours <- numeric(256)
matrix_size <- 16
count <- 1
for (i in 0:(matrix_size - 1)) {
for (j in 0:(matrix_size - 1)) {
adjacent_cells <- get_adjacent_cells(matrix_size, i, j)
cell_numbers <- convert_to_cell_numbers(matrix_size, adjacent_cells)
neighbour_cells_list[[count]] <- cell_numbers
total_neighbours[count] <- length(cell_numbers)
count <- count + 1
}
}
max_neighbours <- max(sapply(neighbour_cells_list, length))
neighbour_cells_matrix <- t(sapply(neighbour_cells_list, function(x) c(x, rep(0, max_neighbours - length(x)))))
get_row_cell_numbers <- function(matrix_size, row) {
cell_numbers <- (row - 1) * matrix_size + 1:matrix_size
return(cell_numbers)
}
interaction_cells_matrix_other <- matrix(0, nrow = nrow(output_other), ncol = matrix_size)
interaction_cells_matrix_school <- matrix(0, nrow = nrow(output_school), ncol = matrix_size)
interaction_cells_matrix_work <- matrix(0, nrow = nrow(output_work), ncol = matrix_size)
interaction_cells_matrix_home <- matrix(0, nrow = nrow(output_home), ncol = matrix_size)
for(i in 1:nrow(output_other))
{
interaction_cells_matrix_other[i,] <- get_row_cell_numbers(matrix_size, as.numeric(output_other$participant_age_bracket[i]))
}
for(i in 1:nrow(output_school))
{
interaction_cells_matrix_school[i,] <- get_row_cell_numbers(matrix_size, as.numeric(output_school$participant_age_bracket[i]))
}
for(i in 1:nrow(output_work))
{
interaction_cells_matrix_work[i,] <- get_row_cell_numbers(matrix_size, as.numeric(output_work$participant_age_bracket[i]))
}
for(i in 1:nrow(output_home))
{
interaction_cells_matrix_home[i,] <- get_row_cell_numbers(matrix_size, as.numeric(output_home$participant_age_bracket[i]))
}
unique_participant_ids <- (c(output_home$part_id, output_other$part_id, output_school$part_id, output_work$part_id))
part_id_home <- output_home$part_id
part_id_other <- output_other$part_id
part_id_school <- output_school$part_id
part_id_work <- output_work$part_id
model_string <- "
model {
# Define priors for the hierarchical model
theta ~ dexp(0.0001)
delta_home ~ dexp(0.0001)
for (i in 1:N) {
sigma[i] ~ dgamma(theta, theta)
}
for (i in 1:(matrix_size * matrix_size)) {
epsilon_home[i] ~ dnorm(0,1/10000)
epsilon_work[i] ~ dnorm(0,1/10000)
epsilon_school[i] ~ dnorm(0,1/10000)
epsilon_other[i] ~ dnorm(0,1/10000)
}
for (i in 1:256){
lambda_val_home[i] <- exp(sum(epsilon_home[neighbour_cells_matrix[i,1:total_neighbours[i]]])/total_neighbours[i])
lambda_val_other[i] <- exp(sum(epsilon_other[neighbour_cells_matrix[i,1:total_neighbours[i]]])/total_neighbours[i])
lambda_val_work[i] <- exp(sum(epsilon_work[neighbour_cells_matrix[i,1:total_neighbours[i]]])/total_neighbours[i])
lambda_val_school[i] <- exp(sum(epsilon_school[neighbour_cells_matrix[i,1:total_neighbours[i]]])/total_neighbours[i])
}
# Likelihood for home contacts
for (i in 1:N_home){
for (j in 1:matrix_size){
X_home[i,j] ~ dpois((sigma[participant_id_home[i]]*lambda_val_home[interaction_cells_matrix_home[i,j]])*(home_vector[i,j] + delta_home))
}
}
# Likelihood for other contacts
for (i in 1:N_other){
for(j in 1:matrix_size){
X_other[i,j] ~ dpois(sigma[participant_id_other[i]]*lambda_val_other[interaction_cells_matrix_other[i,j]])
}
}
# Likelihood for work contacts
for (i in 1:N_work){
for (j in 1:matrix_size){
X_work[i,j] ~ dpois((sigma[participant_id_work[i]]*lambda_val_work[interaction_cells_matrix_work[i,j]])*(work_vector[i]))
}
}
# Likelihood for school contacts
for(i in 1:N_school){
for (j in 1:matrix_size){
X_school[i,j] ~ dpois((sigma[participant_id_school[i]]*lambda_val_school[interaction_cells_matrix_school[i,j]])*(school_vector[i]))
}
}
}
"
data_list <- list(
N = 8001,
N_home = nrow(output_home),
participant_id_home = output_home$part_id,
N_other = nrow(output_other),
participant_id_other = output_other$part_id,
N_work = nrow(output_work),
participant_id_work = output_work$part_id,
N_school = nrow(output_school),
participant_id_school = output_school$part_id,
matrix_size = 16,
interaction_cells_matrix_other = interaction_cells_matrix_other,
interaction_cells_matrix_home = interaction_cells_matrix_home,
interaction_cells_matrix_school = interaction_cells_matrix_school,
interaction_cells_matrix_work = interaction_cells_matrix_work,
neighbour_cells_matrix = neighbour_cells_matrix,
total_neighbours = total_neighbours,
X_home = as.matrix(output_home[,3:18]),
X_other = as.matrix(output_other[,3:18]),
X_work = as.matrix(output_work[,3:18]),
X_school = as.matrix(output_school[,3:18]),
home_vector = as.matrix(output_home[,20:35]),
school_vector = output_school$s_i,
work_vector = output_work$w_i
)
# Initial values
inits <- function() {
list(
theta = 1,
sigma = rgamma(max(unique_participant_ids), shape = theta_org, rate = theta_org),
delta_home = 0.05,
epsilon_home = rnorm(matrix_size * matrix_size, mean = 0, sd = 1/10000),
epsilon_work = rnorm(matrix_size * matrix_size, mean = 0, sd = 1/10000),
epsilon_school = rnorm(matrix_size * matrix_size, mean = 0, sd = 1/10000),
epsilon_other = rnorm(matrix_size * matrix_size, mean = 0, sd = 1/10000)
)
}
params <- c("theta", "sigma","delta_home","epsilon_home")
theta_org <- 5
inits <- list(
theta = 1,
sigma = rgamma(max(unique_participant_ids), shape = theta_org, rate = theta_org),
delta_home = 0.05,
epsilon_home = rnorm(matrix_size * matrix_size, mean = 0, sd = 1/10000),
epsilon_work = rnorm(matrix_size * matrix_size, mean = 0, sd = 1/10000),
epsilon_school = rnorm(matrix_size * matrix_size, mean = 0, sd = 1/10000),
epsilon_other = rnorm(matrix_size * matrix_size, mean = 0, sd = 1/10000)
)
params <- c("theta", "sigma","delta_home","epsilon_home")
theta_org <- 5
# Run the MCMC chains in parallel
# Function to run one chain of the RJAGS model
run_chain_other <- function(chain_id, model_string, data_list, inits) {
# Initialize the model for each chain
model <- jags.model(textConnection(model_string), data = data_list, inits = inits, n.chains = 1)
# Sample from the model
samples <- coda.samples(model = model, variable.names = c("epsilon_other"),n.iter = 5000, thin = 50)
return(samples)
}
run_chain_school <- function(chain_id, model_string, data_list, inits) {
# Initialize the model for each chain
model <- jags.model(textConnection(model_string), data = data_list, inits = inits, n.chains = 1)
# Sample from the model
samples <- coda.samples(model = model, variable.names = c("epsilon_school"),n.iter = 5000, thin = 50)
return(samples)
}
run_chain_work <- function(chain_id, model_string, data_list, inits) {
# Initialize the model for each chain
model <- jags.model(textConnection(model_string), data = data_list, inits = inits, n.chains = 1)
# Sample from the model
samples <- coda.samples(model = model, variable.names = c("epsilon_work"),n.iter = 5000, thin = 50)
return(samples)
}
run_chain_home <- function(chain_id, model_string, data_list, inits) {
# Initialize the model for each chain
model <- jags.model(textConnection(model_string), data = data_list, inits = inits, n.chains = 1)
# Sample from the model
samples <- coda.samples(model = model, variable.names = c("epsilon_home"),n.iter = 5000, thin = 50)
return(samples)
}
# Number of cores to use (use detectCores to find number of cores available)
num_cores <- detectCores() - 1  # Leave 1 core free for system processes
library(parallel)
# Number of cores to use (use detectCores to find number of cores available)
num_cores <- detectCores() - 1  # Leave 1 core free for system processes
load("~/Documents/Code/POLYMOD_Projection/synthetic-contact-matrices-2.0/generate_synthetic_matrices/input/pop/popratio.rdata")
View(popratio)
load("~/Documents/Code/POLYMOD_Projection/synthetic-contact-matrices-2.0/generate_synthetic_matrices/input/school/schoolage.rdata")
load("~/Documents/Code/POLYMOD_Projection/synthetic-contact-matrices-2.0/generate_synthetic_matrices/input/pop/popratio.rdata")
